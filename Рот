import random

class Ship:
    def __init__(self, points):
        self.points = points
        self.hits = set()

    def hit(self, point):
        self.hits.add(point)

    def is_sunk(self):
        return len(self.hits) == len(self.points)

class Board:
    def __init__(self, ships):
        self.size = 6
        self.ships = ships
        self.grid = [['O' for _ in range(self.size)] for _ in range(self.size)]

    def display(self):
        print(" | 1 | 2 | 3 | 4 | 5 | 6 | ")
        for i in range(self.size):
            row = ' | '.join(self.grid[i])
            print(f"{i+1} | {row} |")

    def place_ships(self):
        for ship in self.ships:
            for point in ship.points:
                x, y = point
                self.grid[y][x] = 'â– '

    def check_valid_shot(self, x, y):
        if not (0 <= x < self.size and 0 <= y < self.size):
            raise ValueError("Invalid coordinates! Choose coordinates within the board.")
        if self.grid[y][x] == 'X' or self.grid[y][x] == 'T':
            raise ValueError("You've already shot at this position!")

    def shoot(self, x, y):
        self.check_valid_shot(x, y)
        if (x, y) in self.opponent_ships:
            for ship in self.opponent_ships[(x, y)]:
                ship.hit((x, y))
                self.grid[y][x] = 'X'
                if ship.is_sunk():
                    print("You sunk a ship!")
                    del self.opponent_ships[(x, y)]
                else:
                    print("You hit a ship!")
        else:
            self.grid[y][x] = 'T'
            print("You missed!")

    def all_ships_sunk(self):
        return all(ship.is_sunk() for ship in self.opponent_ships.values())

    def opponent_move(self):
        x, y = random.randint(0, self.size - 1), random.randint(0, self.size - 1)
        while (x, y) in self.shots_taken:
            x, y = random.randint(0, self.size - 1), random.randint(0, self.size - 1)
        self.shots_taken.add((x, y))
        if (x, y) in self.player_ships:
            for ship in self.player_ships[(x, y)]:
                ship.hit((x, y))
                if ship.is_sunk():
                    print("Computer sunk your ship!")
                    del self.player_ships[(x, y)]
                else:
                    print("Computer hit your ship!")
        else:
            print("Computer missed your ships!")

def main():
    player_ships = [
        Ship([(0, 0), (1, 0), (2, 0)]),
        Ship([(4, 0), (4, 1)]),
        Ship([(0, 2), (0, 3)]),
        Ship([(2, 3), (2, 4), (2, 5)]),
        Ship([(4, 3), (5, 3)]),
        Ship([(0, 5)])
    ]

    opponent_ships = [
        Ship([(3, 0), (3, 1)]),
        Ship([(5, 0)]),
        Ship([(1, 2)]),
        Ship([(4, 2)]),
        Ship([(1, 4)]),
        Ship([(3, 4)]),
        Ship([(5, 4)]),
        Ship([(1, 5)]),
        Ship([(3, 5)]),
        Ship([(5, 5)])
    ]

    player_board = Board(player_ships)
    opponent_board = Board(opponent_ships)

    player_board.place_ships()
    opponent_board.place_ships()

    player_board.shots_taken = set()
    opponent_board.shots_taken = set()

    while not player_board.all_ships_sunk() and not opponent_board.all_ships_sunk():
        print("Your turn:")
        player_board.display()
        try:
            x, y = map(int, input("Enter coordinates to shoot (e.g., 1 2): ").split())
            player_board.shoot(x - 1, y - 1)
        except ValueError as e:
            print(e)
            continue

        if player_board.all_ships_sunk():
            print("Congratulations! You've sunk all enemy ships. You win!")
            break

        print("\nComputer's turn:")
        opponent_board.opponent_move()

        if opponent_board.all_ships_sunk():
            print("Oh no! All your ships have been sunk. You lose!")
            break

if __name__ == "__main__":
    main()
