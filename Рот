import random

class Ship:
    def __init__(self, points):
        self.points = points

class Board:
    def __init__(self, ships):
        self.grid_size = 6
        self.player_board = [['O' for _ in range(self.grid_size)] for _ in range(self.grid_size)]
        self.enemy_board = [['O' for _ in range(self.grid_size)] for _ in range(self.grid_size)]
        self.ships = ships
        self.place_ships()

    def place_ships(self):
        for ship in self.ships:
            for point in ship.points:
                x, y = point
                self.player_board[x][y] = '■'

    def display_player_board(self):
        print("  | 1 | 2 | 3 | 4 | 5 | 6 | ")
        for i in range(self.grid_size):
            print(f"{i+1} | {' | '.join(self.player_board[i])} |")

    def display_enemy_board(self):
        print("  | 1 | 2 | 3 | 4 | 5 | 6 | ")
        for i in range(self.grid_size):
            print(f"{i+1} | {' | '.join(self.enemy_board[i])} |")

class Game:
    def __init__(self):
        self.player_board = Board([
            Ship([(1, 1), (1, 2), (1, 3)]),
            Ship([(3, 4), (3, 5)]),
            Ship([(5, 0)]),
            Ship([(0, 2)]),
            Ship([(4, 4)]),
            Ship([(2, 0)]),
            Ship([(4, 0)]),
            Ship([(5, 2)]),
            Ship([(0, 5)]),
            Ship([(2, 3)]),
        ])
        self.enemy_board = Board([
            Ship([(1, 1), (1, 2), (1, 3)]),
            Ship([(3, 4), (3, 5)]),
            Ship([(5, 0)]),
            Ship([(0, 2)]),
            Ship([(4, 4)]),
            Ship([(2, 0)]),
            Ship([(4, 0)]),
            Ship([(5, 2)]),
            Ship([(0, 5)]),
            Ship([(2, 3)]),
        ])
        self.player_shots = set()
        self.enemy_shots = set()
        self.player_won = False
        self.enemy_won = False

    def player_turn(self):
        try:
            print("Your turn:")
            x = int(input("Enter row number (1-6): ")) - 1
            y = int(input("Enter column number (1-6): ")) - 1
            if (x, y) in self.player_shots:
                raise ValueError("You've already shot in this cell!")
            self.player_shots.add((x, y))
            if self.enemy_board.player_board[x][y] == '■':
                print("You hit a ship!")
                self.enemy_board.player_board[x][y] = 'X'
            else:
                print("You missed!")
                self.enemy_board.player_board[x][y] = 'T'
        except ValueError as ve:
            print(ve)

    def enemy_turn(self):
        print("Enemy's turn:")
        while True:
            x = random.randint(0, 5)
            y = random.randint(0, 5)
            if (x, y) not in self.enemy_shots:
                break
        self.enemy_shots.add((x, y))
        if self.player_board.player_board[x][y] == '■':
            print("Enemy hit your ship!")
            self.player_board.player_board[x][y] = 'X'
            if self.check_player_win():
                print("Enemy wins!")
                self.enemy_won = True
        else:
            print("Enemy missed!")
            self.player_board.player_board[x][y] = 'T'

    def check_player_win(self):
        for row in self.player_board.player_board:
            if '■' in row:
                return False
        return True

    def check_enemy_win(self):
        for row in self.enemy_board.player_board:
            if '■' in row:
                return False
        return True

    def play(self):
        print("Welcome to Battleship!")
        while not self.player_won and not self.enemy_won:
            print("\nYour board:")
            self.player_board.display_player_board()
            print("\nEnemy's board:")
            self.enemy_board.display_enemy_board()
            self.player_turn()
            if self.check_enemy_win():
                print("You win!")
                self.player_won = True
                break
            self.enemy_turn()
            if self.check_player_win():
                print("Enemy wins!")
                self.enemy_won = True
                break

game = Game()
game.play()
