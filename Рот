import random

class Ship:
    def __init__(self, points):
        self.points = points

class Board:
    def __init__(self, ships):
        self.grid = [['O' for _ in range(6)] for _ in range(6)]
        self.ships = ships
        self.place_ships()

    def place_ships(self):
        for ship in self.ships:
            for point in ship.points:
                x, y = point
                self.grid[x][y] = '■'

    def display(self, hide_ships):
        print(" | 1 | 2 | 3 | 4 | 5 | 6 | ")
        for i in range(6):
            row = f"{i+1}| {' | '.join(self.grid[i])} |"
            if hide_ships:
                row = row.replace('■', 'O')
            print(row)

class Player:
    def __init__(self, board):
        self.board = board
        self.shots = set()

    def make_move(self):
        while True:
            try:
                x = int(input("Enter row (1-6): ")) - 1
                y = int(input("Enter column (1-6): ")) - 1
                if (x, y) in self.shots:
                    raise ValueError("You've already shot there.")
                if not (0 <= x < 6 and 0 <= y < 6):
                    raise ValueError("Invalid coordinates. Please try again.")
                self.shots.add((x, y))
                return x, y
            except ValueError as ve:
                print(ve)

class ComputerPlayer:
    def __init__(self, board):
        self.board = board
        self.shots = set()

    def make_move(self):
        x, y = random.randint(0, 5), random.randint(0, 5)
        while (x, y) in self.shots:
            x, y = random.randint(0, 5), random.randint(0, 5)
        self.shots.add((x, y))
        return x, y

def main():
    # Define ships for both players
    player_ships = [
        Ship([(0, 0), (0, 1), (0, 2)]),  # 1x3 ship
        Ship([(1, 0), (1, 1)]),  # 2x2 ship 1
        Ship([(2, 3), (3, 3)]),  # 2x2 ship 2
        Ship([(4, 5)]),  # 1x1 ship 1
        Ship([(5, 1)]),  # 1x1 ship 2
        Ship([(5, 4)]),  # 1x1 ship 3
        Ship([(5, 5)])   # 1x1 ship 4
    ]

    computer_ships = [
        Ship([(0, 4), (0, 5), (1, 5)]),  # 1x3 ship
        Ship([(2, 0), (3, 0)]),  # 2x2 ship 1
        Ship([(4, 1), (4, 2)]),  # 2x2 ship 2
        Ship([(0, 0)]),  # 1x1 ship 1
        Ship([(2, 3)]),  # 1x1 ship 2
        Ship([(3, 5)]),  # 1x1 ship 3
        Ship([(4, 4)])   # 1x1 ship 4
    ]

    # Create boards for both players
    player_board = Board(player_ships)
    computer_board = Board(computer_ships)

    # Initialize players
    player = Player(computer_board)
    computer = ComputerPlayer(player_board)

    # Game loop
    while True:
        # Player's turn
        print("\nYour turn:")
        computer_board.display(hide_ships=True)
        x, y = player.make_move()
        if (x, y) in [(point[0], point[1]) for ship in computer_ships for point in ship.points]:
            print("Hit!")
            computer_board.grid[x][y] = 'X'
        else:
            print("Miss!")
            computer_board.grid[x][y] = 'T'

        # Check for player win
        if all(cell == 'X' for row in computer_board.grid for cell in row):
            print("Congratulations! You sank all the computer's ships!")
            break

        # Computer's turn
        print("\nComputer's turn:")
        x, y = computer.make_move()
        if (x, y) in [(point[0], point[1]) for ship in player_ships for point in ship.points]:
            print("Computer hit your ship!")
            player_board.grid[x][y] = 'X'
        else:
            print("Computer missed!")
            player_board.grid[x][y] = 'T'

        # Check for computer win
        if all(cell == 'X' for row in player_board.grid for cell in row):
            print("Game over! Computer sank all your ships!")
            break

if __name__ == "__main__":
    main()
