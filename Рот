import random

class Ship:
    def __init__(self, points):
        self.points = points

class Board:
    def __init__(self, ships):
        self.ships = ships
        self.size = 6
        self.grid = [['O' for _ in range(self.size)] for _ in range(self.size)]

    def place_ships(self):
        for ship in self.ships:
            for point in ship.points:
                x, y = point
                self.grid[x][y] = '■'

    def display(self):
        print(" | 1 | 2 | 3 | 4 | 5 | 6 | ")
        for i in range(self.size):
            print(f"{i + 1}| {' | '.join(self.grid[i])} |")

class Player:
    def __init__(self, name):
        self.name = name
        self.shots = set()

    def make_move(self):
        while True:
            try:
                x = int(input("Enter row number (1-6): ")) - 1
                y = int(input("Enter column number (1-6): ")) - 1
                if (x, y) in self.shots:
                    raise ValueError("You've already shot in this cell.")
                return x, y
            except (ValueError, IndexError):
                print("Invalid input. Please enter row and column numbers between 1 and 6.")

def generate_ships():
    ships = []
    for size in [3, 2, 2, 1, 1, 1, 1]:
        ship_points = set()
        while True:
            x = random.randint(0, 5)
            y = random.randint(0, 5)
            orientation = random.choice(['horizontal', 'vertical'])
            if all((x + i, y) not in ship_points for i in range(size)) and orientation == 'horizontal':
                ship_points.update((x + i, y) for i in range(size))
                break
            elif all((x, y + i) not in ship_points for i in range(size)) and orientation == 'vertical':
                ship_points.update((x, y + i) for i in range(size))
                break
        ships.append(Ship(ship_points))
    return ships

def main():
    player_board = Board(generate_ships())
    player_board.place_ships()
    computer_board = Board(generate_ships())
    computer_board.place_ships()

    player = Player("Player")
    computer = Player("Computer")

    player_turn = True
    while True:
        print("\nPlayer's board:")
        player_board.display()
        print("\nComputer's board:")
        computer_board.display()

        if player_turn:
            print("\nPlayer's turn:")
            x, y = player.make_move()
            if (x, y) in computer.shots:
                print("You've already shot in this cell.")
                continue
            computer.shots.add((x, y))
            if computer_board.grid[x][y] == '■':
                computer_board.grid[x][y] = 'X'
                print("You've hit a ship!")
            else:
                computer_board.grid[x][y] = 'T'
                print("You've missed.")
            if all(all(cell != '■' for cell in row) for row in computer_board.grid):
                print("Congratulations! You've sunk all computer's ships. You win!")
                break
        else:
            print("\nComputer's turn:")
            x = random.randint(0, 5)
            y = random.randint(0, 5)
            if (x, y) in player.shots:
                continue
            player.shots.add((x, y))
            if player_board.grid[x][y] == '■':
                player_board.grid[x][y] = 'X'
                print("Computer hit your ship!")
            else:
                player_board.grid[x][y] = 'T'
                print("Computer missed.")
            if all(all(cell != '■' for cell in row) for row in player_board.grid):
                print("Computer has sunk all your ships. You lose!")
                break

        player_turn = not player_turn

if __name__ == "__main__":
    main()
