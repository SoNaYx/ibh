import random

class Ship:
    def __init__(self, points):
        self.points = points

class Board:
    def __init__(self, ships):
        self.ships = ships
        self.size = 6
        self.grid = [['O' for _ in range(self.size)] for _ in range(self.size)]

    def display(self, hide_ships=False):
        print(" | 1 | 2 | 3 | 4 | 5 | 6 | ")
        for i in range(self.size):
            row = f"{i + 1} | {' | '.join(self.grid[i])} |"
            if not hide_ships:
                row = row.replace('■', 'O')
            print(row)

    def place_ships(self):
        for ship in self.ships:
            for point in ship.points:
                x, y = point
                self.grid[x][y] = '■'

    def is_valid_move(self, x, y):
        return 0 <= x < self.size and 0 <= y < self.size and self.grid[x][y] not in ['X', 'T']

    def make_move(self, x, y):
        if not self.is_valid_move(x, y):
            raise ValueError("Invalid move! Please select a valid cell.")
        
        if self.grid[x][y] == '■':
            self.grid[x][y] = 'X'  # Hit
            return True
        else:
            self.grid[x][y] = 'T'  # Miss
            return False

def generate_random_ship_points(size, length):
    directions = [(0, 1), (1, 0)]
    direction = random.choice(directions)
    x = random.randint(0, size - 1)
    y = random.randint(0, size - 1)
    points = [(x, y)]

    while len(points) < length:
        next_point = (points[-1][0] + direction[0], points[-1][1] + direction[1])
        if 0 <= next_point[0] < size and 0 <= next_point[1] < size:
            points.append(next_point)
        else:
            direction = random.choice(directions)
            x = random.randint(0, size - 1)
            y = random.randint(0, size - 1)
            points = [(x, y)]

    return points

def generate_ships():
    ships = []
    lengths = [3, 2, 2, 1, 1, 1, 1]
    for length in lengths:
        while True:
            ship_points = generate_random_ship_points(6, length)
            ship = Ship(ship_points)
            valid = True
            for point in ship_points:
                for other_ship in ships:
                    for other_point in other_ship.points:
                        if abs(point[0] - other_point[0]) <= 1 and abs(point[1] - other_point[1]) <= 1:
                            valid = False
                            break
            if valid:
                ships.append(ship)
                break
    return ships

def player_turn(board):
    try:
        x = int(input("Enter row (1-6): ")) - 1
        y = int(input("Enter column (1-6): ")) - 1
        hit = board.make_move(x, y)
        if hit:
            print("Hit!")
        else:
            print("Miss!")
    except ValueError:
        print("Invalid input! Please enter valid row and column numbers.")

def computer_turn(board):
    x = random.randint(0, 5)
    y = random.randint(0, 5)
    hit = board.make_move(x, y)
    if hit:
        print("Computer hit at:", x + 1, y + 1)
    else:
        print("Computer missed at:", x + 1, y + 1)

def check_winner(board):
    for row in board.grid:
        if '■' in row:
            return False
    return True

# Main game loop
player_board = Board(generate_ships())
computer_board = Board(generate_ships())
computer_board.place_ships()

while True:
    print("\nPlayer's Turn:")
    computer_board.display(hide_ships=True)
    player_turn(computer_board)
    if check_winner(computer_board):
        print("Congratulations! You won!")
        break
    
    print("\nComputer's Turn:")
    player_board.display()
    computer_turn(player_board)
    if check_winner(player_board):
        print("Computer wins! Try again next time.")
        break
