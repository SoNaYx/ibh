import random

class Ship:
    def __init__(self, points):
        self.points = points
        self.hits = set()

    def is_hit(self, point):
        return point in self.points

    def mark_hit(self, point):
        self.hits.add(point)

    def is_sunk(self):
        return len(self.hits) == len(self.points)

class Board:
    def __init__(self, ships):
        self.ships = ships
        self.grid = [['O' for _ in range(6)] for _ in range(6)]
        self.shots_fired = set()

    def display(self):
        print("  | 1 | 2 | 3 | 4 | 5 | 6 | ")
        for i in range(6):
            row = " | ".join(self.grid[i])
            print(f"{i+1} | {row} | ")

    def place_ships(self):
        for ship in self.ships:
            for point in ship.points:
                x, y = point
                self.grid[x][y] = 'â– '

    def process_shot(self, x, y):
        if (x, y) in self.shots_fired:
            raise ValueError("You've already fired at this position.")
        self.shots_fired.add((x, y))
        hit = False
        for ship in self.ships:
            if ship.is_hit((x, y)):
                ship.mark_hit((x, y))
                self.grid[x][y] = 'X'
                hit = True
                if ship.is_sunk():
                    print("You sank a ship!")
                else:
                    print("You hit a ship!")
                break
        if not hit:
            print("You missed!")
            self.grid[x][y] = 'T'

def random_point():
    return random.randint(0, 5), random.randint(0, 5)

def generate_ship(length, existing_ships):
    ship_points = set()
    while len(ship_points) < length:
        point = random_point()
        valid = True
        for existing_ship in existing_ships:
            for existing_point in existing_ship.points:
                if abs(existing_point[0] - point[0]) <= 1 and abs(existing_point[1] - point[1]) <= 1:
                    valid = False
                    break
            if not valid:
                break
        if valid:
            ship_points.add(point)
    return Ship(ship_points)

def main():
    ships = []
    for length in [3, 2, 2, 1, 1, 1, 1]:
        ship = generate_ship(length, ships)
        ships.append(ship)

    player_board = Board(ships)
    player_board.place_ships()

    computer_board = Board(ships)

    player_won = False
    computer_won = False

    while not player_won and not computer_won:
        print("Your turn:")
        player_board.display()
        try:
            x = int(input("Enter X coordinate (1-6): ")) - 1
            y = int(input("Enter Y coordinate (1-6): ")) - 1
            player_board.process_shot(x, y)
        except ValueError as e:
            print(e)
            continue

        if all(ship.is_sunk() for ship in player_board.ships):
            player_won = True
            break

        print("Computer's turn:")
        x, y = random_point()
        while (x, y) in computer_board.shots_fired:
            x, y = random_point()
        computer_board.process_shot(x, y)

        if all(ship.is_sunk() for ship in computer_board.ships):
            computer_won = True
            break

    if player_won:
        print("Congratulations! You won!")
    elif computer_won:
        print("Sorry, you lost. Better luck next time.")

if __name__ == "__main__":
    main()
